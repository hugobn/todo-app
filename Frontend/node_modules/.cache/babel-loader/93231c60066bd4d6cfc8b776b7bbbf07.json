{"ast":null,"code":"var _jsxFileName = \"/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport './Counter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  //Define the initial state in a constructor\n  //state => counter 0\n  constructor() {\n    super(); // Have to be used always\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.increment,\n          children: \"+1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"count\",\n          children: this.state.counter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.increment = () => {\n      // Update the state - counter++\n      //console.log('increment')\n      //this.state.counter++    // BAD Practice\n      // Best practice is call SetState method\n      this.setState({\n        counter: this.state.counter + 1\n      });\n    };\n\n    this.state = {\n      counter: 0\n    }; //this.increment = this.increment.bind(this)\n  } // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n\n\n}\n\nexport default Counter;","map":{"version":3,"names":["render","React","Component","Counter","constructor","increment","state","counter","setState"],"sources":["/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx"],"sourcesContent":["import { render } from \"@testing-library/react\"\nimport React, {Component} from \"react\"\nimport './Counter.css'\n\nclass  Counter extends Component{\n\n    //Define the initial state in a constructor\n    //state => counter 0\n\n    constructor(){\n        super()  // Have to be used always\n        this.state = {\n            counter: 0\n        }\n        //this.increment = this.increment.bind(this)\n    }\n\n    // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n    render = () => {\n        return(\n            <div className=\"counter\">\n                <button onClick={this.increment}>+1</button>\n                <span className=\"count\">{this.state.counter}</span>\n            </div>\n        )\n    }\n\n    increment = () => {  // Update the state - counter++\n        //console.log('increment')\n        //this.state.counter++    // BAD Practice\n        // Best practice is call SetState method\n        this.setState({\n            counter: this.state.counter + 1\n        })\n    }\n}\n\n\n\nexport default Counter"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,eAAP;;;AAEA,MAAOC,OAAP,SAAuBD,SAAvB,CAAgC;EAE5B;EACA;EAEAE,WAAW,GAAE;IACT,QADS,CACA;;IADA,KASbJ,MATa,GASJ,MAAM;MACX,oBACI;QAAK,SAAS,EAAC,SAAf;QAAA,wBACI;UAAQ,OAAO,EAAE,KAAKK,SAAtB;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAM,SAAS,EAAC,OAAhB;UAAA,UAAyB,KAAKC,KAAL,CAAWC;QAApC;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ;IAMH,CAhBY;;IAAA,KAkBbF,SAlBa,GAkBD,MAAM;MAAG;MACjB;MACA;MACA;MACA,KAAKG,QAAL,CAAc;QACVD,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB;MADpB,CAAd;IAGH,CAzBY;;IAET,KAAKD,KAAL,GAAa;MACTC,OAAO,EAAE;IADA,CAAb,CAFS,CAKT;EACH,CAX2B,CAa5B;;;AAb4B;;AAmChC,eAAeJ,OAAf"},"metadata":{},"sourceType":"module"}