{"ast":null,"code":"var _jsxFileName = \"/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx\";\nimport { render } from \"@testing-library/react\";\nimport React, { Component } from \"react\";\nimport './Counter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  //Define the initial state in a constructor\n  //state => counter 0\n  constructor() {\n    super(); // Have to be used always\n\n    this.state = {\n      counter: 0\n    };\n    this.increment = this.increment.bind(this);\n  } // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n  //render = () => {\n\n\n  render() {\n    //const style = {fontSize: \"50px\"} \n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: [\"+\", this.props.by]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"count\" // The best practice is to have all the css style into the independent css file\n        //style={{fontSize: \"50px\"}} // We can use css here directly wit this structure\n        //style={style}  // we can also use a variable(var, let, const, etc.) to apply the css style\n        ,\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  } // Becuase we changed the render function into a outfunct we need to change the increment func into a outfucnt as well\n  // increment = () => {  // Update the state - counter++\n\n\n  increment() {\n    // Update the state - counter++\n    //console.log('increment')\n    //this.state.counter++    // BAD Practice\n    // Best practice is call SetState method\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"names":["render","React","Component","Counter","constructor","state","counter","increment","bind","props","by","setState"],"sources":["/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx"],"sourcesContent":["import { render } from \"@testing-library/react\"\nimport React, {Component} from \"react\"\nimport './Counter.css'\n\nclass  Counter extends Component{\n\n    //Define the initial state in a constructor\n    //state => counter 0\n\n    constructor(){\n        super()  // Have to be used always\n        this.state = {\n            counter: 0\n        }\n        this.increment = this.increment.bind(this)\n    }\n\n    // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n    //render = () => {\n    render () {\n        //const style = {fontSize: \"50px\"} \n        return(\n            <div className=\"counter\">\n                <button onClick={this.increment}>+{this.props.by}</button>\n                <span className=\"count\"\n                // The best practice is to have all the css style into the independent css file\n                //style={{fontSize: \"50px\"}} // We can use css here directly wit this structure\n                //style={style}  // we can also use a variable(var, let, const, etc.) to apply the css style\n                >{this.state.counter}</span>\n            </div>\n        )\n    }\n\n    // Becuase we changed the render function into a outfunct we need to change the increment func into a outfucnt as well\n    // increment = () => {  // Update the state - counter++\n    increment () {  // Update the state - counter++\n        //console.log('increment')\n        //this.state.counter++    // BAD Practice\n        // Best practice is call SetState method\n        this.setState({\n            counter: this.state.counter + 1\n        })\n    }\n}\n\n\n\nexport default Counter"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,eAAP;;;AAEA,MAAOC,OAAP,SAAuBD,SAAvB,CAAgC;EAE5B;EACA;EAEAE,WAAW,GAAE;IACT,QADS,CACA;;IACT,KAAKC,KAAL,GAAa;MACTC,OAAO,EAAE;IADA,CAAb;IAGA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;EACH,CAX2B,CAa5B;EACA;;;EACAR,MAAM,GAAI;IACN;IACA,oBACI;MAAK,SAAS,EAAC,SAAf;MAAA,wBACI;QAAQ,OAAO,EAAE,KAAKO,SAAtB;QAAA,gBAAmC,KAAKE,KAAL,CAAWC,EAA9C;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAM,SAAS,EAAC,OAAhB,CACA;QACA;QACA;QAHA;QAAA,UAIE,KAAKL,KAAL,CAAWC;MAJb;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH,CA3B2B,CA6B5B;EACA;;;EACAC,SAAS,GAAI;IAAG;IACZ;IACA;IACA;IACA,KAAKI,QAAL,CAAc;MACVL,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB;IADpB,CAAd;EAGH;;AAtC2B;;AA2ChC,eAAeH,OAAf"},"metadata":{},"sourceType":"module"}