{"ast":null,"code":"var _jsxFileName = \"/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx\";\nimport { render } from \"@testing-library/react\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from \"react\";\nimport './Counter.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends Component {\n  //Define the initial state in a constructor, state => counter 0\n  constructor() {\n    super();\n    this.state = {\n      counter: 0\n    };\n    this.increment = this.increment.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CounterButton, {\n        by: 10\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this);\n  }\n\n  increment() {\n    console.log(\"increment\");\n    /*this.setState({\n        counter: this.state.counter + this.props.by\n    })*/\n  }\n\n}\n\nclass CounterButton extends Component {\n  //Define the initial state in a constructor\n  //state => counter 0\n  constructor() {\n    super(); // Have to be used always\n\n    this.state = {\n      counter: 0\n    };\n    this.increment = this.increment.bind(this);\n  } // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n  //render = () => {\n\n\n  render() {\n    //const style = {fontSize: \"50px\"} \n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: [\"+\", this.props.by]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"count\" // The best practice is to have all the css style into the independent css file\n        //style={{fontSize: \"50px\"}} // We can use css here directly wit this structure\n        //style={style}  // we can also use a variable(var, let, const, etc.) to apply the css style\n        ,\n        children: this.state.counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this);\n  } // Becuase we changed the render function into a outfunct we need to change the increment func into a outfucnt as well\n  // increment = () => {  // Update the state - counter++\n\n\n  increment() {\n    // Update the state - counter++\n    //console.log('increment')\n    //this.state.counter++    // BAD Practice\n    // Best practice is call SetState method\n    this.setState({\n      counter: this.state.counter + this.props.by\n    });\n  }\n\n} // Define a default value for props\n\n\nCounterButton.defaultProps = {\n  by: 1 // This by default prop value will be taken by the counter without specify the props into it\n\n}; // Definning this object we show and error message when we pass a String in by props instead of number\n\nCounterButton.propTypes = {\n  by: PropTypes.number\n};\nexport default Counter;","map":{"version":3,"names":["render","PropTypes","React","Component","Counter","constructor","state","counter","increment","bind","console","log","CounterButton","props","by","setState","defaultProps","propTypes","number"],"sources":["/home/developer/Documents/Udemy/Java/FullStack28Minutes/ReactApps/frontend/todo-app/src/components/counter/Counter.jsx"],"sourcesContent":["import { render } from \"@testing-library/react\"\nimport PropTypes from 'prop-types'\nimport React, {Component} from \"react\"\nimport './Counter.css'\n\nclass Counter extends Component{\n    //Define the initial state in a constructor, state => counter 0\n    constructor(){\n        super() \n        this.state = {\n            counter: 0\n        }\n        this.increment = this.increment.bind(this)\n    }\n\n    render(){\n        return(\n          <div className=\"counter\">\n            <CounterButton by={1}/>\n            <CounterButton by={5}/>\n            <CounterButton by={10}/>\n          </div>\n        )\n      }\n\n    increment () {\n        console.log(\"increment\")\n        /*this.setState({\n            counter: this.state.counter + this.props.by\n        })*/\n    }\n}\n\nclass  CounterButton extends Component{\n    //Define the initial state in a constructor\n    //state => counter 0\n    constructor(){\n        super()  // Have to be used always\n        this.state = {\n            counter: 0\n        }\n        this.increment = this.increment.bind(this)\n    }\n\n    // Using the outfunction (callbackfn) avoid to use the binding in constructor example: /this.increment = this.increment.bind(this)\n    //render = () => {\n    render () {\n        //const style = {fontSize: \"50px\"} \n        return(\n            <div className=\"counter\">\n                <button onClick={this.increment}>+{this.props.by}</button>\n                <span className=\"count\"\n                // The best practice is to have all the css style into the independent css file\n                //style={{fontSize: \"50px\"}} // We can use css here directly wit this structure\n                //style={style}  // we can also use a variable(var, let, const, etc.) to apply the css style\n                >{this.state.counter}</span>\n            </div>\n        )\n    }\n\n    // Becuase we changed the render function into a outfunct we need to change the increment func into a outfucnt as well\n    // increment = () => {  // Update the state - counter++\n    increment () {  // Update the state - counter++\n        //console.log('increment')\n        //this.state.counter++    // BAD Practice\n        // Best practice is call SetState method\n        this.setState({\n            counter: this.state.counter + this.props.by\n        })\n    }\n}\n\n// Define a default value for props\nCounterButton.defaultProps = {\n    by: 1,   // This by default prop value will be taken by the counter without specify the props into it\n}\n\n// Definning this object we show and error message when we pass a String in by props instead of number\nCounterButton.propTypes = {\n    by: PropTypes.number\n}\n\n\nexport default Counter"],"mappings":";AAAA,SAASA,MAAT,QAAuB,wBAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,eAAP;;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAA+B;EAC3B;EACAE,WAAW,GAAE;IACT;IACA,KAAKC,KAAL,GAAa;MACTC,OAAO,EAAE;IADA,CAAb;IAGA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;EACH;;EAEDT,MAAM,GAAE;IACJ,oBACE;MAAK,SAAS,EAAC,SAAf;MAAA,wBACE,QAAC,aAAD;QAAe,EAAE,EAAE;MAAnB;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,aAAD;QAAe,EAAE,EAAE;MAAnB;QAAA;QAAA;QAAA;MAAA,QAFF,eAGE,QAAC,aAAD;QAAe,EAAE,EAAE;MAAnB;QAAA;QAAA;QAAA;MAAA,QAHF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAOD;;EAEHQ,SAAS,GAAI;IACTE,OAAO,CAACC,GAAR,CAAY,WAAZ;IACA;AACR;AACA;EACK;;AAzB0B;;AA4B/B,MAAOC,aAAP,SAA6BT,SAA7B,CAAsC;EAClC;EACA;EACAE,WAAW,GAAE;IACT,QADS,CACA;;IACT,KAAKC,KAAL,GAAa;MACTC,OAAO,EAAE;IADA,CAAb;IAGA,KAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;EACH,CATiC,CAWlC;EACA;;;EACAT,MAAM,GAAI;IACN;IACA,oBACI;MAAK,SAAS,EAAC,SAAf;MAAA,wBACI;QAAQ,OAAO,EAAE,KAAKQ,SAAtB;QAAA,gBAAmC,KAAKK,KAAL,CAAWC,EAA9C;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI;QAAM,SAAS,EAAC,OAAhB,CACA;QACA;QACA;QAHA;QAAA,UAIE,KAAKR,KAAL,CAAWC;MAJb;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ;EAUH,CAzBiC,CA2BlC;EACA;;;EACAC,SAAS,GAAI;IAAG;IACZ;IACA;IACA;IACA,KAAKO,QAAL,CAAc;MACVR,OAAO,EAAE,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKM,KAAL,CAAWC;IAD/B,CAAd;EAGH;;AApCiC,C,CAuCtC;;;AACAF,aAAa,CAACI,YAAd,GAA6B;EACzBF,EAAE,EAAE,CADqB,CAChB;;AADgB,CAA7B,C,CAIA;;AACAF,aAAa,CAACK,SAAd,GAA0B;EACtBH,EAAE,EAAEb,SAAS,CAACiB;AADQ,CAA1B;AAKA,eAAed,OAAf"},"metadata":{},"sourceType":"module"}